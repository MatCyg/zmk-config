#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys.h"

#define NAV             0
#define ALPHA           1
#define SYMBOL          2
#define NUM_APP         3
#define FUNCTION        4
#define ADJUST          5
#define APPS            6
#define EMOJI           7
#define PASTE_MO        8
#define ALPHA_NORMAL    9
#define SEL_MODE        10
#define SHORTCUT_F      11
#define SHORTCUT        12

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE LALT>;
};

/ {

    combos {
        #include "combos.dtsi"
    };

    behaviors {
        #include "behaviors.dtsi"
        #include "macros/macros_emoji.dtsi"
        #include "macros/macros_apps.dtsi"
        #include "macros/macros.dtsi"
        #include "macros/auto_shift.dtsi"
        #include "macros/selection_mode.dtsi"
        #include "macros/shifted.dtsi"
        #include "macros/symbols.dtsi"

        macro_hm_bspc: macro_hm_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "macro_hm_bspc";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick_tap_ms = <180>;
            flavor = "hold-preferred";
            bindings = <&symbol_layer_alt>, <&kp>;
        };


        nav_ctrl_ret: nav_ctrl_ret {
            compatible = "zmk,behavior-hold-tap";
            label = "nav_ctrl_ret";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick_tap_ms = <180>;
            flavor = "hold-preferred";
            bindings = <&nav_ctrl>, <&kp>;
        };

        a_sqt: a_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "a_sqt";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp SQT>;
            mods = <(MOD_LALT)>;
       };

       t_dqt: t_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "t_dqt";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp DQT>;
            mods = <(MOD_LALT)>;
       };

       td_paste: td_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "td_paste";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&kp _PASTE>, <&paste_macro>;
       };


        num_app_to: num_app_to {
            compatible = "zmk,behavior-hold-tap";
            label = "num_app_to";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&num_app_alpha>, <&to>;
        };
    };


   macros {
        ZMK_MACRO(
            paste_macro2,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings = <&kp _PASTE &sl PASTE_MO>;
        )

        ZMK_MACRO(
            paste_macro,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings = <&kp _PASTE &kp RET>;
        )

		ZMK_MACRO(
			abc_macro,
			wait-ms = <10>;
			tap-ms = <20>;
			bindings = <&kp A &kp B &kp C>;
		)

		ZMK_MACRO(
			hold_shift_macro,
			bindings
				= <&macro_press &kp LSHFT>
				, <&macro_tap>
				, <&kp D &kp O &kp G>
				, <&macro_release &kp LSHFT>
				;
		)

		ZMK_MACRO(
			custom_timing,
			bindings
				= <&macro_wait_time 50>
				, <&kp A>
				, <&macro_tap_time 20>
				, <&kp B &kp C>
				;
		)

		ZMK_MACRO(
			dual_sequence_macro,
			wait-ms = <10>;
			tap-ms = <40>;
			bindings
				= <&macro_press &kp LALT>
				, <&macro_tap>
				, <&kp TAB>
				, <&macro_pause_for_release>
				, <&macro_release &kp LALT>
				;
		)

        ZMK_MACRO(
            nav_gui,
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &to SHORTCUT>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>
                , <&macro_tap &to NAV>
                ;
        )

        ZMK_MACRO(
            nav_ctrl,
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &to SHORTCUT>
                , <&macro_press &kp LCTL>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTL>
                , <&macro_tap &to NAV>
                ;
        )

		ZMK_MACRO(
			num_app_alpha,
			wait-ms = <0>;
			tap-ms = <0>;
			bindings
				= <&macro_tap &tog NUM_APP>
				, <&macro_pause_for_release>
				, <&macro_tap &tog NUM_APP>
				;
		)
	};

    ZMK_MACRO(
        macro_bslh,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_tap &to ALPHA>
            , <&macro_tap &tog NUM_APP>
            , <&macro_press &kp BSLH>
            , <&macro_pause_for_release>
            , <&macro_release &kp BSLH>
           ;
    )

    ZMK_MACRO(
        symbol_layer_alt,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press &mo SYMBOL &kp LALT>
            , <&macro_pause_for_release>
            , <&macro_release &mo SYMBOL &kp LALT>
            ;
    )

    keymap {
        compatible = "zmk,keymap";

        navigation { bindings = <
            &kp _NEXT_WIN &kp _APP3     &kp _APP2     &kp _APP1   &kp _SEARCH       &morphing_pg_up   &morphing_alt_left &morphing_up    &morphing_alt_right      &kp DEL
            &kp _LAST_APP &kp _PREV_TAB &kp _NEXT_TAB &kp _LMB    &kp _TERM         &morphing_pg_dn   &morphing_left     &morphing_down  &morphing_right          &tog SHORTCUT_F
            &kp _UNDO     &hm LSFT _CUT &kp _COPY     &kp LA(TAB) &paste_macro2     &kp _NEW_TT &kp LA(UP)   &kp LG(L) &hm LSFT LA(DOWN)  &kp _BKMRKS
                                         &num_app_to 0 ALPHA &nav_gui         &nav_ctrl_ret 0 RET  &macro_hm_bspc 0 BSPC
        >;};

        alpha { bindings = <
            &letter_Q &letter_W  &letter_F &letter_P &letter_B        &letter_J &letter_L &letter_U    &letter_Y    &letter_SCLN
            &letter_A &letter_R  &letter_S &letter_T &letter_G        &letter_M &letter_N &letter_E    &letter_I    &letter_O
            &letter_Z &hm LSFT X &letter_C &letter_D &letter_V        &letter_K &letter_H &letter_CMMA &hm LSFT DOT &letter_FSLH
                   &hm_to NUM_APP SPC &kp_to LGUI NAV        &hm_spc LCTL RET &macro_hm_bspc 0 BSPC
        >;};

        symbol { bindings = <
           &sym_GRAVE &sym_LBRC     &sym_RBRC &sym_MINUS &sym_DLLR        &sym_BSLH &sym_N7 &sym_N8 &sym_N9 &sym_EXCL
           &sym_SQT   &sym_LPAR     &sym_RPAR &sym_DQT   &sym_UNDER       &sym_PLUS &sym_N4 &sym_N5 &sym_N6 &sym_N0
           &sym_AT    &hm LSFT LBKT &sym_RBKT &sym_EQUAL &sym_PIPE        &sym_AMPS &sym_N1 &sym_N2 &sym_N3 &sym_TILDE
                                         &mt RGUI SPC &kp LGUI        &mt LCTL RET &mt LALT BSPC
        >;};

        num_app { bindings = <
           &kp LG(N4) &kp LG(N3)      &kp LG(N2) &kp LG(N1) &kp LG(N9)        &macro_bslh &kp N7 &kp N8 &kp N9 &kp EXCL
           &kp GCS(A) &kp GCS(R)      &kp GCS(S) &kp GCS(T) &kp GCS(G)        &kp PLUS &kp N4 &kp N5 &kp N6 &kp N0
           &kp GCS(Z) &mt LSFT GCS(X) &kp GCS(C) &kp GCS(D) &kp GCS(V)        &kp AMPS &kp N1 &kp N2 &kp N3 &kp TILDE
                                                      &kp SPC &kp LGUI        &mt LCTL LC(RET) &mt LALT LA(BSPC)
        >;};

        function { bindings = <
            &kp _ZOOM_OUT &kp _ZOOM_IN  &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT              &kp HOME   &kp F7 &kp F8 &kp F9 &kp F12
            &kp K_PWR     &kp _TT_START &kp _TT_SHOW &ss_clip_nav &kp C_PLAY_PAUSE        &kp END    &kp F4 &kp F5 &kp F6 &kp F10
            &kp _LOCK     &mt LSFT X    &kp LALT     &kp LCTL     &none                   &to ADJUST &kp F1 &kp F2 &kp F3 &kp F11
                                                      &kp LCTL &kp_to LGUI NAV        &mt LCTL RET &mt LALT BSPC
        >;};

        adjust { bindings = <
          &none      &kp _LAY_BAR &kp _OS_DARK &kp _OS_LIGHT &bootloader           &kp GRAVE &kp INS &kp LBKT  &kp RBKT  &kp BSLH
          &none      &none        &kp C_BRI_DN &kp C_BRI_UP  &kp _TOG_DIACT        &kp CAPS  &none   &kp MINUS &kp EQUAL &kp SQT
          &bt BT_CLR &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1  &bt BT_SEL 0          &none     &none   &none     &none     &none
                                               &to ALPHA   &kp_to LGUI NAV   &mt LCTL RET &mt LALT BSPC
        >;};

        apps { bindings = <
          &apps_F1  &apps_F2  &apps_F3  &apps_F4  &apps_F5         &apps_F16    &apps_F17    &apps_F18    &apps_F19    &apps_F20
          &apps_F6  &apps_F7  &apps_F8  &apps_F9  &apps_F10        &apps_F21    &apps_F22    &apps_F23    &apps_F24    &apps_meh_F1
          &apps_F11 &apps_F12 &apps_F13 &apps_F14 &apps_F15        &apps_meh_F2 &apps_meh_F3 &apps_meh_F4 &apps_meh_F5 &apps_meh_F6
                                        &to ALPHA &to ALPHA        &none &none
        >;};

        emoji { bindings = <
          &code_block &code_java &code_json &emoji_P &emoji_B        &emoji_J &emoji_L &emoji_U    &emoji_Y   &emoji_SCLN
          &emoji_A    &emoji_R   &emoji_S   &emoji_T &emoji_G        &emoji_M &emoji_N &emoji_E    &emoji_I   &emoji_O
          &emoji_Z    &emoji_X   &emoji_C   &emoji_D &emoji_V        &emoji_K &emoji_H &emoji_CMMA &emoji_DOT &emoji_FSLH
                                          &to ALPHA &to ALPHA        &none &none
        >;};

        paste_mo { bindings = <
          &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
          &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
          &trans &trans &trans &trans &kp RET       &trans &trans &trans &trans &trans
                               &trans &trans        &trans &trans
        >;};

        alpha_normal { bindings = <
            &kp Q &kp W  &kp F &kp P &kp B        &kp J &kp L &kp U    &kp Y    &kp SCLN
            &kp A &kp R  &kp S &kp T &kp G        &kp M &kp N &kp E    &kp I    &kp O
            &kp Z &hm LSFT X &kp C &kp D &kp V        &kp K &kp H &kp CMMA &hm LSFT DOT &kp FSLH
                   &hm_to NUM_APP SPC &kp_to LGUI NAV        &hm_spc LCTL RET &hm_spc LALT BSPC
        >;};

        sel_mode { bindings = <
          &trans &trans &trans &trans &trans        &sel_pg_up &sel_alt_left &sel_up   &sel_alt_right &trans
          &trans &trans &trans &trans &trans        &sel_pg_dn &sel_left     &sel_down &sel_right     &trans
          &trans &trans &trans &trans &trans        &trans     &trans        &trans    &trans         &trans
                               &trans &trans        &trans     &trans
        >;};
        shortcut_full { bindings = <
            &shifted_tog_Q 0 0 &shifted_tog_W 0 0  &shifted_tog_F 0 0 &shifted_tog_P 0 0 &shifted_tog_B 0 0        &shifted_tog_J 0 0 &shifted_tog_L 0 0 &shifted_tog_U 0 0    &shifted_tog_Y 0 0    &shifted_tog_SCLN 0 0
            &shifted_tog_A 0 0 &shifted_tog_R 0 0  &shifted_tog_S 0 0 &shifted_tog_T 0 0 &shifted_tog_G 0 0        &shifted_tog_M 0 0 &shifted_tog_N 0 0 &shifted_tog_E 0 0    &shifted_tog_I 0 0    &shifted_tog_O 0 0
            &shifted_tog_Z 0 0 &hm LSFT X          &shifted_tog_C 0 0 &shifted_tog_D 0 0 &shifted_tog_V 0 0        &shifted_tog_K 0 0 &shifted_tog_H 0 0 &shifted_tog_CMMA 0 0 &hm LSFT DOT          &shifted_tog_FSLH 0 0
                   &hm_to NUM_APP SPC &kp_to LGUI NAV        &hm_spc LCTL RET &hm_spc LALT BSPC
        >;};

        shortcut { bindings = <
            &shifted_Q 0 0 &shifted_W 0 0 &shifted_F 0 0 &shifted_P 0 0 &shifted_B 0 0        &shifted_J 0 0 &kp LA(LEFT)   &kp UP            &kp LA(RIGHT) &shifted_SCLN 0 0
            &shifted_A 0 0 &shifted_R 0 0 &shifted_S 0 0 &shifted_T 0 0 &shifted_G 0 0        &shifted_M 0 0 &kp LEFT       &kp DOWN          &kp RIGHT     &shifted_O 0 0
            &shifted_Z 0 0 &hm LSFT X     &shifted_C 0 0 &shifted_D 0 0 &shifted_V 0 0        &shifted_K 0 0 &shifted_H 0 0 &shifted_CMMA 0 0 &hm LSFT DOT  &shifted_FSLH 0 0
                   &hm_to NUM_APP SPC &kp_to LGUI NAV        &hm_spc LCTL RET &hm_spc LALT BSPC
        >;};

	};
};


